#/*
#** ###################################################################
#**     THIS MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
#**     Filename  : INS.lcf
#**     Project   : INS
#**     Processor : MCF51QE64CLH
#**     Compiler  : CodeWarrior ColdFireV1 C Compiler
#**     Date/Time : 2016-09-09, 04:20, # CodeGen: 0
#**     Abstract  :
#**        This file is used by the linker. It describes files to be linked,
#**        memory ranges, stack size, etc. For detailed description of the LCF file
#**        see CodeWarrior documentation. This file is generated by default.
#**        You can switch off generation by setting the property
#**        "Generate LCF file = no" on the "Build options" tab in CPU component and then modify
#**        this file if needed.
#**
#**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
#**     All Rights Reserved.
#**     
#**     Redistribution and use in source and binary forms, with or without modification,
#**     are permitted provided that the following conditions are met:
#**     
#**     o Redistributions of source code must retain the above copyright notice, this list
#**       of conditions and the following disclaimer.
#**     
#**     o Redistributions in binary form must reproduce the above copyright notice, this
#**       list of conditions and the following disclaimer in the documentation and/or
#**       other materials provided with the distribution.
#**     
#**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
#**       contributors may be used to endorse or promote products derived from this
#**       software without specific prior written permission.
#**     
#**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#**     
#**     http: www.freescale.com
#**     mail: support@freescale.com
#** ###################################################################
#*/

# Memory ranges

MEMORY {
   code        (RX)  : ORIGIN = 0x00000410, LENGTH = 0x0000FBF0
   userram     (RWX) : ORIGIN = 0x00800000, LENGTH = 0x00002000
}

SECTIONS {

# Heap and Stack sizes definition
  ___heap_size     = 0x0400;
  ___stack_size    = 0x0400;

# MCF51QE64 Derivative Memory map definitions from linker command files:
# ___RAM_ADDRESS, ___RAM_SIZE, ___FLASH_ADDRESS, ___FLASH_SIZE linker
# symbols must be defined in the linker command file.

# 8 Kbytes Internal SRAM
   ___RAM_ADDRESS = 0x00800000;
   ___RAM_SIZE    = 0x00002000;

# 64 KByte Internal Flash Memory
   ___FLASH_ADDRESS  = 0x00000000;
   ___FLASH_SIZE     = 0x00010000;

  .userram        : {} > userram
  .code      : {} > code
  .text :
  {
    *(.text)
    . = ALIGN (0x4);
    *(.rodata)
    . = ALIGN (0x4);
    ___ROM_AT = .;
    ___DATA_ROM = .;
  } >> code

  .data : AT(___ROM_AT)
  {
    ___DATA_RAM = .;
    . = ALIGN(0x4);
    *(.exception)
    . = ALIGN(0x4);
    __exception_table_start__ = .;
    EXCEPTION
    __exception_table_end__ = .;

    ___sinit__ = .;
      STATICINIT
    __START_DATA = .;

    *(.data)
    . = ALIGN (0x4);
    __END_DATA = .;

    __START_SDATA = .;
    *(.sdata)
    . = ALIGN (0x4);
    __END_SDATA = .;

    ___DATA_END = .;
    __SDA_BASE = .;
    . = ALIGN (0x4);
  } >> userram

  .bss :
  {
    ___BSS_START = .;
    __START_SBSS = .;
    *(.sbss)
    . = ALIGN (0x4);
    *(SCOMMON)
    __END_SBSS = .;

    __START_BSS = .;
    *(.bss)
    . = ALIGN (0x4);
    *(COMMON)
    __END_BSS = .;
    ___BSS_END = .;

    . = ALIGN(0x4);
  } >> userram

  .custom :
  {
    ___HEAP_START       = .;
    ___heap_addr        = ___HEAP_START;
    ___HEAP_END         = ___HEAP_START + ___heap_size;
    ___SP_END             = ___HEAP_END;
    ___SP_INIT          = ___SP_END + ___stack_size;

    ___mem_limit        = ___HEAP_END;
    ___stack_safety     = 16;

    . = ALIGN (0x4);
  } >> userram

  __SP_INIT             = ___SP_INIT;

  ___SP_AFTER_RESET     = __SP_INIT;

  _romp_at = ___ROM_AT + SIZEOF(.data);
  .romp : AT(_romp_at)
  {
    __S_romp = _romp_at;
    WRITEW(___ROM_AT);
    WRITEW(ADDR(.data));
    WRITEW(SIZEOF(.data));
    WRITEW(0);
    WRITEW(0);
    WRITEW(0);
  }
}
