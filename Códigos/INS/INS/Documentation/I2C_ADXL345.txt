=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "CI2C1"     (component InternalI2C)
   - CI2C1_SendChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes one character (byte) to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SelectSlave10" method or in the component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is obtainable from 
                (OnTransmitData, OnError or OnArbitLost) events.   When working as a SLAVE, this method writes a character to 
                the internal output slave buffer and, after the master starts the communication, to the I2C bus. If no 
                character is ready for a transmission (internal output slave buffer is empty), the Empty character will be sent 
                (see "Empty character" property).
   - CI2C1_RecvChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads one character (byte) from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, property "Target slave address init". If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a character from the input slave buffer.
   - CI2C1_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - CI2C1_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - CI2C1_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.

Module "Bit1"      (component BitIO)
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Bit1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Bit2"      (component BitIO)
   - Bit2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Bit2_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Bit3"      (component BitIO)
   - Bit3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit3_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit3_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit3_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "TI1"       (component TimerInt)

Module "Cpu"       (component MCF51QE128_64)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
